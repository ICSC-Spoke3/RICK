#!/bin/bash
#SBATCH -A clusters
#SBATCH -p pleiadi
#SBATCH -J LOFAR
### number of nodes
#SBATCH -N 32
### number of hyperthreading threads
#SBATCH --ntasks-per-core=1
### number of MPI tasks per node
#SBATCH --ntasks-per-node=36
#SBATCH -n 1152
### number of openmp threads
#SBATCH --cpus-per-task=1
### number of allocated GPUs per node
##SBATCH --gres=gpu:2
#SBATCH --mem=110G
#SBATCH -o test.out
#SBATCH -e test.err
#SBATCH -t 08:00:00 


module purge

echo $SLURM_NODELIST
export MODULE_VERSION=5.0.1
source /opt/cluster/spack/share/spack/setup-env.sh
module load default-gcc-11.2.0

cd /u/glacopo/LOFAR/hpc_imaging-end-of-re_structuring/
make SYSTYPE=Amonra -j1 clean
rm -f w-stackingCfftw_ring
make SYSTYPE=Amonra -j1 mpi_ring

OUT_SHM=result_thunder
OUT_SHM_RES=Test_0/results_thunder

rm -f ${OUT_SHM} ${OUT_SHM_RES}

export use_cuda=no

if [ "$use_cuda" = "no" ]
then
  export typestring=omp_cpu
  export exe=w-stackingCfftw_ring
fi

if [ "$use_cuda" = "yes" ]
then
  export typestring=cuda
  export exe=w-stackingfftw
fi

Hmin=1
Hmax=32
Tmin=32
Tmax=32

for (( h=$Hmin; h<=$Hmax; h*=2 ))
do
    for (( t=$Tmin; t<=$Tmax; t*=2 ))
    do
	N=$(( ${h}*${t} ))
	echo -e "\tRunning $h hosts\n"
	export logdir=mpi_${N}_${typestring}_${SLURM_CPUS_PER_TASK}
	echo "Creating $logdir"
	rm -fr $logdir
	mkdir $logdir

	for itest in {1..3}
	do
	    export logfile=test_${itest}_${logdir}.log
	    echo "time mpirun -np ${N} --map-by ppr:${t}:node /u/glacopo/LOFAR/hpc_imaging-end-of-re_structuring/${exe} /u/glacopo/LOFAR/hpc_imaging-end-of-re_structuring/data/paramfile.txt" > $logfile
	    time mpirun -np ${N} --map-by ppr:${t}:node --bind-to core /u/glacopo/LOFAR/hpc_imaging-end-of-re_structuring/${exe} /u/glacopo/LOFAR/hpc_imaging-end-of-re_structuring/data/paramfile.txt >> $logfile
	    mv $logfile $logdir

	    Reduce_time=$( grep -w 'Reduce time :' res.ring | gawk '{print $2}' )
	    FFTW_time=$( grep -w 'FFTW time :' res.ring | gawk '{print $2}' )
	    Phase_time=$( grep -w 'Phase time :' res.ring | gawk '{print $2}' )
	    Total_time=$( grep -w 'TOT time :' res.ring | gawk '{print $2}' )

	    echo $N $Reduce_time $FFTW_time $Phase_time $Total_time >> ${OUT_SHM}
	    
	    mv timings.dat ${logdir}/timings_${itest}.dat
	    cat ${logdir}/timings_all.dat ${logdir}/timings_${itest}.dat >> ${logdir}/timings_all.dat
	done
	echo -e "\n\n" >> ${OUT_SHM}
	avg_red=$( awk '{sum+=$2} END { print sum/3 }' ${OUT_SHM} )
	avg_fftw=$( awk '{sum+=$3} END { print sum/3 }' ${OUT_SHM} )
	avg_phase=$( awk '{sum+=$4} END { print sum/3 }' ${OUT_SHM} )
	avg_tot=$( awk '{sum+=$5} END { print sum/3 }' ${OUT_SHM} )
	std_red=$( awk '{if($2!=""){count++;sum+=$2};y+=$2^2} END{sq=sqrt(y/3-(sum/3)^2);sq=sq?sq:0;print sq}' ${OUT_SHM} )
	std_fftw=$( awk '{if($3!=""){count++;sum+=$3};y+=$3^2} END{sq=sqrt(y/3-(sum/3)^2);sq=sq?sq:0;print sq}' ${OUT_SHM} )
	std_phase=$( awk '{if($4!=""){count++;sum+=$4};y+=$4^2} END{sq=sqrt(y/3-(sum/3)^2);sq=sq?sq:0;print sq}' ${OUT_SHM} )
	std_tot=$( awk '{if($5!=""){count++;sum+=$5};y+=$5^2} END{sq=sqrt(y/3-(sum/3)^2);sq=sq?sq:0;print sq}' ${OUT_SHM} )

	echo $N $avg_red $std_red $avg_fftw $std_fftw $avg_phase $std_phase $avg_tot $std_tot >> ${OUT_SHM_RES}
	rm -f ${OUT_SHM}
    done
    echo -e "\n\n" >> ${OUT_SHM_RES}
done
